/*
The cost of stock on each day is given in an array price[]. Each day you may decide to either buy or sell the stock i at price[i], you can even buy and sell the stock on the same day. Find the maximum profit that you can get.

Note: A stock can only be sold if it has been bought previously and multiple stocks cannot be held on any given day.

Examples:

Input: prices[] = [100, 180, 260, 310, 40, 535, 695]
Output: 865
Explanation: Buy the stock on day 0 and sell it on day 3 => 310 – 100 = 210. Buy the stock on day 4 and sell it on day 6 => 695 – 40 = 655. Maximum Profit = 210 + 655 = 865.


Input: prices[] = [4, 2, 2, 2, 4]
Output: 2
Explanation: Buy the stock on day 3 and sell it on day 4 => 4 – 2 = 2. Maximum Profit = 2.
Constraints:
1 <= prices.size() <= 105
0 <= prices[i] <= 104
*/

class Solution {
    public int maximumProfit(int prices[]) {
         int dp[][]=new int[prices.length+1][2];
         for(int row[]:dp)
         {
             Arrays.fill(row,-1);
         }
         return count(prices,0,1,dp);
    }
    public static int count(int prices[],int index,int buy,int dp[][])
    {
        if(index==prices.length)
        {
            return 0;
        }
        if(dp[index][buy]!=-1)
        {
            return dp[index][buy];
        }
        int profit=0;
        if(buy==1)
        {
            profit=Math.max((-prices[index]+count(prices,index+1,0,dp)),
                            (0+count(prices,index+1,1,dp)));
        }
        else
        {
            profit=Math.max((prices[index]+count(prices,index+1,1,dp)),
                            (0+count(prices,index+1,0,dp)));
        }
        return dp[index][buy]=profit;
    }
}
